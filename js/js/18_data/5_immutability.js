// ###불변성
// 원시데이터: String, Number, Boolean, undefined, null  
// 참조데이터: Array, Object, Fuction(callback)

// 원시데이터 Memory Addresse
//-------------------------------------------------------------
// |1:    1       |2:    4      |3:      7      |4:  
//-------------------------------------------------------------

//let은 재할당 될 수 있다는 것 잊지 말기
let aa = 1;
let bb = 4;

console.log(aa, bb, aa===bb); //>> 1 4 false: 변수때문에 같아보일 수 있으나, 서로 다른 메모리 주소를 바라보고있기때문에 다름
bb = aa;
console.log(aa, bb, aa===bb); //>> 1 1 true: 같아서 ture라고 볼 수도 있으나, 바라보는 메모리 주소가 같아서 ture이기도함
aa = 7;
console.log(aa, bb, aa===bb); //>> 7 1 false
let cc = 1; 
console.log(bb, cc, bb===cc); //>> 1 1 false: 생긴게 같기도하지만, c가 1번 메모리 주소를 바라보고 있기도 해서 같음


// 참조데이터 Memory Addresse: 데이터 복사가 아니라 메모리의 참조주소만 옮겨 간다
//-------------------------------------------------------------
// |1: {  k : 1  }    |2: {  k : 1   }    |3: {         }     |4:  
//-------------------------------------------------------------

//let은 재할당 될 수 있다는 것 잊지 말기
let a = {k : 1}; // 1번의 메모리주소
let b = {k : 1}; // 2번의 메모리 주소

console.log(a, b, a===b); //>> 각각의 메모리 주소가 다르므로 false

a.k = 7; //>> 1번 메모리주소에 들어간 내용이  k : 7
b = a;// >> 7 = 7
console.log(a, b, a===b); //>> b=a이기때문에 같은 1번 주소를 보고있음 그래서 true

a.k = 2;//>> 2, 2
console.log(a, b, a===b); 
//>> 1번 메모리 주소를 보고있던 a가 2로 바뀌어서 b도 마찬가지로 2 2===2 true

let c = b; // >> c = 2인데, b는 1번 메모리주소를 보고있음.
console.log(a, b, c, a===c); //>>  2 2 2===2 메모리 주소가 같아서 true

a.k = 9; //>> 9, 9, 9 위와 마찬가지로 같은 1번메모리 주소를 보고있음 true
console.log(a, b, c, a===c)